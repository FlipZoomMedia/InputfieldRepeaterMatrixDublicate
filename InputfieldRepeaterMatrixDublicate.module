<?php namespace ProcessWire;

/**
 * @author  FlipZoom Media Inc. - David Karich
 * @contact David Karich <david.karich@flipzoom.de>
 * @website www.flipzoom.de
 * @create  2019-02-09
 * @style   Tab size: 4 / Soft tabs: YES
 * ----------------------------------------------------------------------------------
 * @licence
 * Copyright (c) 2019 FlipZoom Media Inc. - David Karich
 * Permission is hereby granted, free of charge, to any person obtaining a copy 
 * of this software and associated documentation files (the "Software"), to deal 
 * in the Software without restriction, including without limitation the rights 
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell 
 * copies of the Software, and to permit persons to whom the Software is furnished 
 * to do so, subject to the following conditions: The above copyright notice and 
 * this permission notice shall be included in all copies or substantial portions 
 * of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT 
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION 
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE 
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * ----------------------------------------------------------------------------------
 */

class InputfieldRepeaterMatrixDublicate extends WireData implements Module {

    /**
     * ------------------------------------------------------------------------
     * Module info
     * ------------------------------------------------------------------------
     * @return array
     */
    public static function getModuleInfo() {
        return array(
            'title'     => __('Repeater Matrix Item Dublicator', __FILE__),
            'summary'   => __('Proof of concept: This module allows you to clone a repeater item from one page to another. Currently only support for non nested items and from field to field with the same name.', __FILE__),
            'author'    => 'David Karich - FlipZoom Media Inc.',
            'href'      => 'https://www.flipzoom.de',
            'version'   => 102,
            'autoload'  => true,
            'singular'  => true,
            'icon'      => 'clipboard', 
            'requires'  => 'FieldtypeRepeaterMatrix'
            );
    }

    /**
     * ------------------------------------------------------------------------
     * Initialize the repeaters inputfield
     * ------------------------------------------------------------------------
     */
    public function init() {

        // ------------------------------------------------------------------------
        // Load scripts
        // ------------------------------------------------------------------------
        $this->config->scripts->add($this->config->urls->InputfieldRepeaterMatrixDublicate . "InputfieldRepeaterMatrixDublicate.js");
        $this->config->styles->add($this->config->urls->InputfieldRepeaterMatrixDublicate . "InputfieldRepeaterMatrixDublicate.css");

        // ------------------------------------------------------------------------
        // Bind hooks
        // ------------------------------------------------------------------------
        $this->addHookAfter('Inputfield::render', $this, 'render'); 
        $this->addHookAfter('Inputfield::processInput', $this, 'processInput'); 

        // ------------------------------------------------------------------------
        // Bind translations for js functions
        // ------------------------------------------------------------------------
        $this->config->js('InputfieldRepeaterMatrixDublicate', array(
            'labels' => array(
                'dublicate' => $this->_x('Copy this item to the clipboard to paste into another page?', 'repeater-item-action'), 
                'paste'     => $this->_x('Paste item', 'repeater-item-action'), 
                'confirm'   => $this->_x('Are you sure you want to paste the item here? This will save the current page and inserts the item at the last position.', 'repeater-item-action'), 
                'clipboard' => $this->_x('The Repeater Item has been copied to the clipboard. Go to another page with the same repeater field and paste it. Note: the current version of the item can only be copied if the page has been saved.', 'repeater-item-action')
            )
        ));
    }

    /**
     * ------------------------------------------------------------------------
     * Bind data attributes to repeater items
     * ------------------------------------------------------------------------
     * @param  HookEvent $event
     * @return HookEvent
     */
    public function render(HookEvent $event) {

        // ------------------------------------------------------------------------
        // Init event vars
        // ------------------------------------------------------------------------
        $inputfield = $event->object;
        $pageID     = $this->sanitizer->int($this->input->id);

        // ------------------------------------------------------------------------
        // Only bind on repeater matrix field items
        // ------------------------------------------------------------------------
        if(!$inputfield instanceof InputfieldRepeaterMatrix) return;

        // ------------------------------------------------------------------------
        // Render data attributes
        // ------------------------------------------------------------------------
        $event->return = str_replace("<li class='Inputfield", "<li data-rmd-target-field='{$inputfield->name}' data-rmd-current-page='{$pageID}' class='Inputfield", $event->return);
    }

    /**
     * ------------------------------------------------------------------------
     * Clone repeater item from on to another page
     * ------------------------------------------------------------------------
     * @param  HookEvent $event
     */
    public function processInput(HookEvent $event) {

        // ------------------------------------------------------------------------
        // Init vars
        // ------------------------------------------------------------------------
        $inputfield = $event->object; 
        $data       = $event->arguments[0];

        // ------------------------------------------------------------------------
        // Check if target page and field is valid
        // ------------------------------------------------------------------------
        if($inputfield instanceof InputfieldRepeaterMatrix AND (string) $inputfield->name === (string) $data['rmdFieldName'] AND $data['rmdTargetPage'] AND $data['rmdSourceItem']) {
            
            // ------------------------------------------------------------------------
            // Init vars and get pages
            // ------------------------------------------------------------------------
            $fieldName          = $data['rmdFieldName'];
            $targetPageID       = (int) $data['rmdTargetPage'];
            $sourcePageID       = (int) $data['rmdSourceItem'];
            $sourcePage         = wire('pages')->get($sourcePageID);
            $targetPage         = wire('pages')->get($targetPageID);
            $sortOrder          = wireCount($targetPage->$fieldName) + 1;
            $sourcePage->sort   = $sortOrder;
            $sourcePage->status = Page::statusUnpublished;

            // ------------------------------------------------------------------------
            // Clone item from source to target page
            // ------------------------------------------------------------------------
            if($sourcePage AND $targetPage) {
                $targetPage->$fieldName->add($sourcePage);
                $targetPage->$fieldName->save();
            }
        }
    }

}
